/* ========================================================================
   * Copyright 2014 ejemplo
   *
   * Licensed under the MIT, The MIT License (MIT)
   * Copyright (c) 2014 ejemplo
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
   * ========================================================================
  
  
  Source generated by CrudMaker version 1.0.0.201410152247*/

package co.edu.uniandes.csw.ejemplo.carrito.logic.ejb;

import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.transaction.UserTransaction;

import org.jboss.arquillian.container.test.api.Deployment;
import org.jboss.arquillian.junit.Arquillian;
import org.jboss.shrinkwrap.api.ShrinkWrap;
import org.jboss.shrinkwrap.api.spec.WebArchive;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import java.util.*;


import co.edu.uniandes.csw.ejemplo.carrito.logic.dto.CarritoPageDTO;
import co.edu.uniandes.csw.ejemplo.carrito.logic.dto.CarritoDTO;
import co.edu.uniandes.csw.ejemplo.carrito.logic.api.ICarritoLogicService;
import co.edu.uniandes.csw.ejemplo.carrito.persistence.CarritoPersistence;
import co.edu.uniandes.csw.ejemplo.carrito.persistence.api.ICarritoPersistence;
import co.edu.uniandes.csw.ejemplo.carrito.persistence.entity.CarritoEntity;
import co.edu.uniandes.csw.ejemplo.carrito.persistence.converter.CarritoConverter;
import static co.edu.uniandes.csw.ejemplo.util._TestUtil.*;

@RunWith(Arquillian.class)
public class CarritoLogicServiceTest {

	public static final String DEPLOY = "Prueba";

	@Deployment
	public static WebArchive createDeployment() {
		return ShrinkWrap.create(WebArchive.class, DEPLOY + ".war")
				.addPackage(CarritoLogicService.class.getPackage())
				.addPackage(ICarritoLogicService.class.getPackage())
				.addPackage(CarritoPersistence.class.getPackage())
				.addPackage(CarritoEntity.class.getPackage())
				.addPackage(ICarritoPersistence.class.getPackage())
                .addPackage(CarritoDTO.class.getPackage())
                .addPackage(CarritoConverter.class.getPackage())
                .addPackage(CarritoEntity.class.getPackage())
				.addAsResource("META-INF/persistence.xml", "META-INF/persistence.xml")
                .addAsWebInfResource("META-INF/beans.xml", "beans.xml");
	}

	@Inject
	private ICarritoLogicService carritoLogicService;
	
	@Inject
	private ICarritoPersistence carritoPersistence;	

	@Before
	public void configTest() {
		try {
			clearData();
			insertData();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private void clearData() {
		List<CarritoDTO> dtos=carritoPersistence.getCarritos();
		for(CarritoDTO dto:dtos){
			carritoPersistence.deleteCarrito(dto.getId());
		}
	}

	private List<CarritoDTO> data=new ArrayList<CarritoDTO>();

	private void insertData() {
		for(int i=0;i<3;i++){
			CarritoDTO pdto=new CarritoDTO();
			pdto.setName(generateRandom(String.class));
			pdto.setClientId(generateRandom(Long.class));
			pdto=carritoPersistence.createCarrito(pdto);
			data.add(pdto);
		}
	}
	
	@Test
	public void createCarritoTest(){
		CarritoDTO ldto=new CarritoDTO();
		ldto.setName(generateRandom(String.class));
		ldto.setClientId(generateRandom(Long.class));
		
		
		CarritoDTO result=carritoLogicService.createCarrito(ldto);
		
		Assert.assertNotNull(result);
		
		CarritoDTO pdto=carritoPersistence.getCarrito(result.getId());
		
		Assert.assertEquals(ldto.getName(), pdto.getName());	
		Assert.assertEquals(ldto.getClientId(), pdto.getClientId());	
	}
	
	@Test
	public void getCarritosTest(){
		List<CarritoDTO> list=carritoLogicService.getCarritos();
		Assert.assertEquals(list.size(), data.size());
        for(CarritoDTO ldto:list){
        	boolean found=false;
            for(CarritoDTO pdto:data){
            	if(ldto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	@Test
	public void getCarritoTest(){
		CarritoDTO pdto=data.get(0);
		CarritoDTO ldto=carritoLogicService.getCarrito(pdto.getId());
        Assert.assertNotNull(ldto);
		Assert.assertEquals(pdto.getName(), ldto.getName());
		Assert.assertEquals(pdto.getClientId(), ldto.getClientId());
        
	}
	
	@Test
	public void deleteCarritoTest(){
		CarritoDTO pdto=data.get(0);
		carritoLogicService.deleteCarrito(pdto.getId());
        CarritoDTO deleted=carritoPersistence.getCarrito(pdto.getId());
        Assert.assertNull(deleted);
	}
	
	@Test
	public void updateCarritoTest(){
		CarritoDTO pdto=data.get(0);
		
		CarritoDTO ldto=new CarritoDTO();
		ldto.setId(pdto.getId());
		ldto.setName(generateRandom(String.class));
		ldto.setClientId(generateRandom(Long.class));
		
		
		carritoLogicService.updateCarrito(ldto);
		
		
		CarritoDTO resp=carritoPersistence.getCarrito(pdto.getId());
		
		Assert.assertEquals(ldto.getName(), resp.getName());	
		Assert.assertEquals(ldto.getClientId(), resp.getClientId());	
	}
	
	@Test
	public void getCarritoPaginationTest(){
		
		CarritoPageDTO dto1=carritoLogicService.getCarritos(1,2);
		Assert.assertNotNull(dto1);
        Assert.assertEquals(dto1.getRecords().size(),2);
        Assert.assertEquals(dto1.getTotalRecords().longValue(),3L);
		
		
		CarritoPageDTO dto2=carritoLogicService.getCarritos(2,2);
		Assert.assertNotNull(dto2);
        Assert.assertEquals(dto2.getRecords().size(),1);
        Assert.assertEquals(dto2.getTotalRecords().longValue(),3L);
		
		for(CarritoDTO dto:dto1.getRecords()){
        	boolean found=false;
            for(CarritoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        for(CarritoDTO dto:dto2.getRecords()){
        	boolean found=false;
            for(CarritoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
        
        CarritoPageDTO dto3=carritoLogicService.getCarritos(1,3);
		Assert.assertNotNull(dto3);
        Assert.assertEquals(dto3.getRecords().size(),data.size());
        Assert.assertEquals(dto3.getTotalRecords().longValue(),data.size());
		
		for(CarritoDTO dto:dto3.getRecords()){
        	boolean found=false;
            for(CarritoDTO pdto:data){
            	if(dto.getId()==pdto.getId()){
                	found=true;
                }
            }
            Assert.assertTrue(found);
        }
	}
	
	
}