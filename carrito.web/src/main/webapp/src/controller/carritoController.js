/* ========================================================================
   * Copyright 2014 ejemplo
   *
   * Licensed under the MIT, The MIT License (MIT)
   * Copyright (c) 2014 ejemplo
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files (the "Software"), to deal
  in the Software without restriction, including without limitation the rights
  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  copies of the Software, and to permit persons to whom the Software is
  furnished to do so, subject to the following conditions:
  
  The above copyright notice and this permission notice shall be included in
  all copies or substantial portions of the Software.
  
  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  THE SOFTWARE.
   * ========================================================================
  
  
  Source generated by CrudMaker version 1.0.0.201410152247*/
define(['controller/_carritoController','delegate/carritoDelegate'], function() {
    App.Controller.CarritoController = App.Controller._CarritoController.extend({
        list: function(params,callback,context) {
            //Inicialización estandar del modelo
            if (params) 
            {
                var data = params.data;
            }
            if (App.Utils.eventExists(this.componentId + '-' + 'instead-carrito-list')) 
            {
                Backbone.trigger(this.componentId + '-' + 'instead-carrito-list', {view: this, data: data});
            } 
            else 
            {
                Backbone.trigger(this.componentId + '-' + 'pre-carrito-list', {view: this, data: data});
                var self = this;
                if (!this.currentList) 
                {
                    this.currentList = new this.listModelClass();
                    if (this.pageSize) {
			this.currentList.setPageSize(this.pageSize);
                    }
                }
                
                //Lamada al delegate para obtener el nombre del usuario autenticado
                App.Delegate.CarritoDelegate.prototype.getLoggedUser("", function(data) 
                {
                    //Si la llamada es exitosa, se obtienen los carritos de compras según el nombre obtenido anteriormente
                    //haciendo la llamada al delegate hacia el nuevo servicio del carrito de compras, que obtiene lo carritos de compras de un usuario
                    App.Delegate.CarritoDelegate.prototype.getClientCarts(data, function(data2) {
 
 
                        var elementos = data2;
                        //se crea un nuevo modelList con la respuesta del servicio
                        self.currentList = new self.listModelClass();
                        _.each(elementos.records, function(d) {
                            var model = new App.Model.CarritoModel(d);
                            self.currentList.push(model);
 
                        });
                        
                        Backbone.trigger(self.componentId + '-' + 'post-carrito-list', {view: self});
 
 
                    }, function(data3) {
 
                    });
 
                }, function(data4) {
 
 
                });
                
                this.currentList.fetch({
                    data: data,
                    success: function(resp) {
                        callback.call(context,{data: self.currentList, page: resp.state.currentPage, pages: resp.state.totalPages, totalRecords: resp.state.totalRecords});
                        Backbone.trigger(self.componentId + '-' + 'post-producto-list', {view: self});
                    },
                    error: function(mode, error) {
                        Backbone.trigger(self.componentId + '-' + 'error', {event: 'producto-list', view: self, error: error});
                    }
                });

            }
        },
        /*Se reimplmenta la función _loadRequiredComponentsData para que el combo box de 
         * 'createCarroCompras' solo muestre la opción que hacer referencia al usuario autenticado*/
        _loadRequiredComponentsData: function(callBack) {
            var self = this;
            var listReady = _.after(1, function() {
                callBack();
            });
            var listDataReady = function(componentName, model) {
               //Lamado al delegate para saber el usuario actualmente autenticado
                App.Delegate.CarritoDelegate.prototype.getLoggedUser("", function(data) {
                    var list = model.models;
                    //el modellist (en la variable model) se reconstruye eliminando los demás clientes.
                    for (var i = 0; i < list.length; i++) {
                        if (list[i].attributes.name != data) {
                            list.splice(i, 1);
                        }
                    }
                    self[componentName] = model;
                    listReady();
 
                }, function(data4) {
 
 
                });
 
            };
            App.Utils.getComponentList('clientComponent', listDataReady);
        }

    });
    return App.Controller.CarritoController;
}); 